# Starting board
board = [["_", "_", "_"], ["_", "_", "_"], ["_", "_", "_"]]

# Print board rows
def display_board(board):
    for row in board:
        print(" ".join(row))

# Ask the user for next move
def get_move():
    row = int(input("Enter row (0-2): "))
    col = int(input("Enter column (0-2): "))
    return row, col

# Check if the user input is valid
def is_valid_move(board, row, col):
    if row < 0 or row > 2 or col < 0 or col > 2:
        return False
    if board[row][col] != "_":
        return False
    return True

# Update the board with the user move
def update_board(board, row, col, player):
    board[row][col] = player


def check_win(board, player):
    # Check rows for win
    for row in board:
        if row[0] == row[1] == row[2] == player:
            return True
    # Starting board
board = [["_", "_", "_"], ["_", "_", "_"], ["_", "_", "_"]]

# Print board rows
def display_board(board):
    for row in board:
        print(" ".join(row))

# Ask the user for next move
def get_move():
    row = int(input("Enter row (0-2): "))
    col = int(input("Enter column (0-2): "))
    return row, col

# Check if the user input is valid
def is_valid_move(board, row, col):
    if row < 0 or row > 2 or col < 0 or col > 2:
        return False
    if board[row][col] != "_":
        return False
    return True

# Update the board with the user move
def update_board(board, row, col, player):
    board[row][col] = player


def check_win(board, player):
    # Check rows for win
    for row in board:
        if row[0] == row[1] == row[2] == player:
            return True
    # Check columns for win
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] == player:
            return True
    # Check diagonally for win
    if board[0][0] == board[1][1] == board[2][2] == player:
        return True
    if board[0][2] == board[1][1] == board[2][0] == player:
        return True
    return False


def play_game():
    # Greeting and start the game
    print("Welcome to DevSecOps12 Tic Tac Toe!")
    display_board(board)
    # Start with player X
    player = "X"
    while True:
        print("Player", player, "turn")
        row, col = get_move()
        if not is_valid_move(board, row, col):
            print("Wrong move, please try again")
            continue
        update_board(board, row, col, player)
        display_board(board)
        if check_win(board, player):
            print("Player", player, "wins!")
            break
        if "_" not in [pos for row in board for pos in row]:
            print("It's a tie!")
            break
        # Switch players
        player = "O" if player == "X" else "X"
    print("Thanks for playing!")


play_game()
